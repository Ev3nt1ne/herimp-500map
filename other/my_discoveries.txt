
https://github.com/Dancephy/Mixxx-Pioneer-DDJ-SB3

A:
    <group>[QuickEffectRack1_[Channel1]_Effect1]</group>
    <key>enabled</key>

    This apply the effects or remove them

B:
    for sync, there are 2 led configuration: 91 05 / 93 05. This means that also
         FX leds coud have different option for blinking.

C:
    The value for <group> doesn't matter when using a script function, but it is available to the script function as an extra parameter. This can be useful so one script function can be used for manipulate decks.

D: function definition:
        ControllerName.functionName = function (channel, control, value, status, group) {
            // your custom code goes here
        }
    You can leave off parameters you don't need from the end of the function declaration, but the parameters must stay in order.

E:
    Scripts can access the state of Mixxx through the Mixxx Control system using the following functions:

    engine.getParameter(string group, string key);
    engine.setParameter(string group, string key, double newValue);
    engine.getValue(string group, string key);
    engine.setValue(string group, string key, double newValue);

F:
    Tip: For toggling the state of a binary Mixxx Control, the script.toggleControl(string group, string key) function can be used as a convenient shortcut.

G:
    To keep the state of your controller in sync with the state of Mixxx, register callback functions that Mixxx will execute when the state of a Mixxx Control changes. Typically these callback functions will #send MIDI output to the controller, but they can also be used to change the state of script variables.
    Callback functions are registered with the engine.makeConnection function, which takes 3 parameters:
        group of the Mixxx Control (string)
        name of the Mixxx Control (string)
        JavaScript function to execute when the Mixxx Control changes. This function takes three parameters: the new value of the Mixxx Control, the group, and the Mixxx Control name. this in the context of the function refers to the value of this where engine.makeConnection was called.
    engine.makeConnection returns an object that represents the callback connection. This object should be stored in a script variable.

    To switch the controller between different modes, such as controlling a different deck:
        disconnect the old connection object by calling its ''disconnect'' method (with no arguments)
        register the new connection with ''engine.makeConnection''
        call the ''trigger'' method of the new connection object (with no arguments) to immediately execute the callback using the state of the new Mixxx Control.
    New in Mixxx 2.3: You can check if a connection is disconnected by checking isConnected or by comparing the return value of disconnect():

H:
    Generally, buttons have their LEDs controlled by sending a 3 byte short message with the same first two bytes as when the controller sends a signal for a button press. For example, if the controller sends a 0x91, 0x11, 0x7F message when a button is pressed, calling midi.sendShortMsg(0x91, 0x11, 0x7F) will light the LED and calling midi.sendShortMsg(0x91, 0x11, 0x00) will turn the LED off. If the LED has multiple colors, typically the color is determined by the third byte.

I (as IMPORTAnt):
    Generally, you should not call midi.sendShortMsg or midi.sendSysexMsg directly from functions that handle MIDI input. Instead, the input function should change the state of a Mixxx Control and you should call midi.sendShortMsg/midi.sendSysexMsg in a callback function that reacts to changes in that Mixxx Control. Refer to the section above for details. This way, the state of the controller will always be in sync with what Mixxx is actually doing, even if the user manipulates Mixxx with the keyboard, mouse, or another controller. If the MIDI input handling function only changes the state of script variables but not Mixxx Controls, then it would be appropriate to call midi.sendShortMsg/midi.sendSysexMsg from the input handling function.

    ---- Undersatnd better:
    If you change the functionality of an absolute control (one that has hard stops, max and min position, not infinite encoder) which is controlling mixxxcontrols and has soft-takeover enabled, you will need to tell Mixxx each time you change its functionality (e.g. press shift button) what physical rotary you are manipulating. This will prevent an abrupt jump to its current value from the old one, when switching the old functionality back (i.e. unshift). Do this with the following function, supplying the MixxxControl you're switching control away from:
        engine.softTakeoverIgnoreNextValue("[Channel1]", "rate");
    This should be called when receiving MIDI input for the knob/fader that switches its behavior. If it is called unconditionally when switching to another layer and the user doesn't actually move the knob/fader before the next layer change, Mixxx will mistakenly initiate soft takeover if the user moves the knob/fader fast enough.

J: as jogwheel

K: for i to 8 pad
    active = ((slicerPosInSection === i) ? ledBeatState : !ledBeatState) ? 0x7F : 0x00;
    con ledBeatState = true o false(false fa il negativo)

